import { types } from 'https://deno.land/x/clarinet@v1.0.6/index.ts';
import { readOnlyCall, transactionCall } from './base.ts';
const launchData = {
    title: types.utf8("ClearFund Campaign"),
    description: types.buff("Crowdfunding"),
    link: types.utf8("https://launch.campaign"),
    fundGoal: types.uint(20000),
    startsAt: types.uint(10),
    endsAt: types.uint(50)
};
let launchArguments = [
    launchData.title,
    launchData.description,
    launchData.link,
    launchData.fundGoal,
    launchData.startsAt,
    launchData.endsAt
];
const pledgeData = {
    campaignId: types.uint(1),
    amount: types.uint(1000)
};
const unpledgeData = {
    campaignId: types.uint(1),
    amount: types.uint(500)
};
// launch functions
export function launch(sender) {
    return transactionCall(sender, "clearfund", "launch", launchArguments);
}
// pledge functions
export function pledge(sender) {
    return transactionCall(sender, "clearfund", "pledge", [
        pledgeData.campaignId,
        pledgeData.amount
    ]);
}
export function pledgeAmountEmpty(sender) {
    return transactionCall(sender, "clearfund", "pledge", [
        pledgeData.campaignId,
        types.uint(0)
    ]);
}
export function pledgeAmountLessThan500(sender) {
    return transactionCall(sender, "clearfund", "pledge", [
        pledgeData.campaignId,
        types.uint(499)
    ]);
}
export function pledgeAmountGreaterThanGoal(sender) {
    return transactionCall(sender, "clearfund", "pledge", [
        pledgeData.campaignId,
        types.uint(20000)
    ]);
}
// unpledge functions
export function unpledge(sender) {
    return transactionCall(sender, "clearfund", "unpledge", [
        unpledgeData.campaignId,
        unpledgeData.amount
    ]);
}
export function unpledgeAll(sender) {
    return transactionCall(sender, "clearfund", "unpledge", [
        unpledgeData.campaignId,
        pledgeData.amount
    ]);
}
export function unpledgeMoreThanPledged(sender) {
    return transactionCall(sender, "clearfund", "unpledge", [
        unpledgeData.campaignId,
        types.uint(1200)
    ]);
}
// refund functions
export function refund(sender) {
    return transactionCall(sender, "clearfund", "refund", [
        unpledgeData.campaignId
    ]);
}
// read-only functions
export function getCampaign(chain, sender) {
    return readOnlyCall(chain, sender, "clearfund", "get-campaign", [
        pledgeData.campaignId
    ]);
}
export function getInvestment(chain, sender) {
    return readOnlyCall(chain, sender, "clearfund", "get-investment", [
        pledgeData.campaignId,
        types.principal(sender)
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvYW5kcmVzY2MvRG9jdW1lbnRzL0Jsb2NrY2hhaW4vY2xhcml0eS1jb2RlLWNoYWxsZW5nZS9oZWxwZXJzL2NsZWFyZnVuZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFpbiwgdHlwZXMgfSBmcm9tICdodHRwczovL2Rlbm8ubGFuZC94L2NsYXJpbmV0QHYxLjAuNi9pbmRleC50cyc7XG5pbXBvcnQgeyByZWFkT25seUNhbGwsIHRyYW5zYWN0aW9uQ2FsbCB9IGZyb20gJy4vYmFzZS50cydcblxuY29uc3QgbGF1bmNoRGF0YSA9IHtcbiAgICB0aXRsZTogdHlwZXMudXRmOChcIkNsZWFyRnVuZCBDYW1wYWlnblwiKSxcbiAgICBkZXNjcmlwdGlvbjogdHlwZXMuYnVmZihcIkNyb3dkZnVuZGluZ1wiKSxcbiAgICBsaW5rOiB0eXBlcy51dGY4KFwiaHR0cHM6Ly9sYXVuY2guY2FtcGFpZ25cIiksXG4gICAgZnVuZEdvYWw6IHR5cGVzLnVpbnQoMjAwMDApLFxuICAgIHN0YXJ0c0F0OiB0eXBlcy51aW50KDEwKSxcbiAgICBlbmRzQXQ6IHR5cGVzLnVpbnQoNTApXG59XG5cbmxldCBsYXVuY2hBcmd1bWVudHMgPSBbXG4gICAgbGF1bmNoRGF0YS50aXRsZSxcbiAgICBsYXVuY2hEYXRhLmRlc2NyaXB0aW9uLFxuICAgIGxhdW5jaERhdGEubGluayxcbiAgICBsYXVuY2hEYXRhLmZ1bmRHb2FsLFxuICAgIGxhdW5jaERhdGEuc3RhcnRzQXQsXG4gICAgbGF1bmNoRGF0YS5lbmRzQXRcbl1cblxuY29uc3QgcGxlZGdlRGF0YSA9IHtcbiAgICBjYW1wYWlnbklkOiB0eXBlcy51aW50KDEpLFxuICAgIGFtb3VudDogdHlwZXMudWludCgxMDAwKVxufVxuXG5jb25zdCB1bnBsZWRnZURhdGEgPSB7XG4gICAgY2FtcGFpZ25JZDogdHlwZXMudWludCgxKSxcbiAgICBhbW91bnQ6IHR5cGVzLnVpbnQoNTAwKVxufVxuXG4vLyBsYXVuY2ggZnVuY3Rpb25zXG5leHBvcnQgZnVuY3Rpb24gbGF1bmNoKHNlbmRlcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uQ2FsbChzZW5kZXIsIFwiY2xlYXJmdW5kXCIsIFwibGF1bmNoXCIsIGxhdW5jaEFyZ3VtZW50cylcbn1cblxuLy8gcGxlZGdlIGZ1bmN0aW9uc1xuZXhwb3J0IGZ1bmN0aW9uIHBsZWRnZShzZW5kZXI6IHN0cmluZykge1xuICAgIHJldHVybiB0cmFuc2FjdGlvbkNhbGwoc2VuZGVyLCBcImNsZWFyZnVuZFwiLCBcInBsZWRnZVwiLCBbcGxlZGdlRGF0YS5jYW1wYWlnbklkLCBwbGVkZ2VEYXRhLmFtb3VudF0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwbGVkZ2VBbW91bnRFbXB0eShzZW5kZXI6IHN0cmluZykge1xuICAgIHJldHVybiB0cmFuc2FjdGlvbkNhbGwoc2VuZGVyLCBcImNsZWFyZnVuZFwiLCBcInBsZWRnZVwiLCBbcGxlZGdlRGF0YS5jYW1wYWlnbklkLCB0eXBlcy51aW50KDApXSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBsZWRnZUFtb3VudExlc3NUaGFuNTAwKHNlbmRlcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uQ2FsbChzZW5kZXIsIFwiY2xlYXJmdW5kXCIsIFwicGxlZGdlXCIsIFtwbGVkZ2VEYXRhLmNhbXBhaWduSWQsIHR5cGVzLnVpbnQoNDk5KV0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwbGVkZ2VBbW91bnRHcmVhdGVyVGhhbkdvYWwoc2VuZGVyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdHJhbnNhY3Rpb25DYWxsKHNlbmRlciwgXCJjbGVhcmZ1bmRcIiwgXCJwbGVkZ2VcIiwgW3BsZWRnZURhdGEuY2FtcGFpZ25JZCwgdHlwZXMudWludCgyMDAwMCldKVxufVxuXG4vLyB1bnBsZWRnZSBmdW5jdGlvbnNcbmV4cG9ydCBmdW5jdGlvbiB1bnBsZWRnZShzZW5kZXI6IHN0cmluZykge1xuICAgIHJldHVybiB0cmFuc2FjdGlvbkNhbGwoc2VuZGVyLCBcImNsZWFyZnVuZFwiLCBcInVucGxlZGdlXCIsIFt1bnBsZWRnZURhdGEuY2FtcGFpZ25JZCwgdW5wbGVkZ2VEYXRhLmFtb3VudF0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnBsZWRnZUFsbChzZW5kZXI6IHN0cmluZykge1xuICAgIHJldHVybiB0cmFuc2FjdGlvbkNhbGwoc2VuZGVyLCBcImNsZWFyZnVuZFwiLCBcInVucGxlZGdlXCIsIFt1bnBsZWRnZURhdGEuY2FtcGFpZ25JZCwgcGxlZGdlRGF0YS5hbW91bnRdKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5wbGVkZ2VNb3JlVGhhblBsZWRnZWQoc2VuZGVyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdHJhbnNhY3Rpb25DYWxsKHNlbmRlciwgXCJjbGVhcmZ1bmRcIiwgXCJ1bnBsZWRnZVwiLCBbdW5wbGVkZ2VEYXRhLmNhbXBhaWduSWQsIHR5cGVzLnVpbnQoMTIwMCldKVxufVxuXG4vLyByZWZ1bmQgZnVuY3Rpb25zXG5leHBvcnQgZnVuY3Rpb24gcmVmdW5kKHNlbmRlcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uQ2FsbChzZW5kZXIsIFwiY2xlYXJmdW5kXCIsIFwicmVmdW5kXCIsIFt1bnBsZWRnZURhdGEuY2FtcGFpZ25JZF0pXG59XG5cbi8vIHJlYWQtb25seSBmdW5jdGlvbnNcbmV4cG9ydCBmdW5jdGlvbiBnZXRDYW1wYWlnbihjaGFpbjogQ2hhaW4sIHNlbmRlcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlYWRPbmx5Q2FsbChjaGFpbiwgc2VuZGVyLCBcImNsZWFyZnVuZFwiLCBcImdldC1jYW1wYWlnblwiLCBbcGxlZGdlRGF0YS5jYW1wYWlnbklkXSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEludmVzdG1lbnQoY2hhaW46IENoYWluLCBzZW5kZXI6IHN0cmluZykge1xuICAgIHJldHVybiByZWFkT25seUNhbGwoY2hhaW4sIHNlbmRlciwgXCJjbGVhcmZ1bmRcIiwgXCJnZXQtaW52ZXN0bWVudFwiLCBbcGxlZGdlRGF0YS5jYW1wYWlnbklkLCB0eXBlcy5wcmluY2lwYWwoc2VuZGVyKV0pXG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBZ0IsS0FBSyxRQUFRLDhDQUE4QyxDQUFDO0FBQzVFLFNBQVMsWUFBWSxFQUFFLGVBQWUsUUFBUSxXQUFXLENBQUE7QUFFekQsTUFBTSxVQUFVLEdBQUc7SUFDZixLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztJQUN2QyxXQUFXLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDdkMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUM7SUFDM0MsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQzNCLFFBQVEsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUN4QixNQUFNLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Q0FDekI7QUFFRCxJQUFJLGVBQWUsR0FBRztJQUNsQixVQUFVLENBQUMsS0FBSztJQUNoQixVQUFVLENBQUMsV0FBVztJQUN0QixVQUFVLENBQUMsSUFBSTtJQUNmLFVBQVUsQ0FBQyxRQUFRO0lBQ25CLFVBQVUsQ0FBQyxRQUFRO0lBQ25CLFVBQVUsQ0FBQyxNQUFNO0NBQ3BCO0FBRUQsTUFBTSxVQUFVLEdBQUc7SUFDZixVQUFVLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDekIsTUFBTSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0NBQzNCO0FBRUQsTUFBTSxZQUFZLEdBQUc7SUFDakIsVUFBVSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLE1BQU0sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztDQUMxQjtBQUVELG1CQUFtQjtBQUNuQixPQUFP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